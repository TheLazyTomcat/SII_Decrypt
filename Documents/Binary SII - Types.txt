This file describes types used in binary SII file of format version 1 and 2.
It is a supplement to file "Binary SII - Format.txt" - you are strongly advised
to read that file first.


================================================================================
                              Table of value types
================================================================================

 value type number (range)  |   type, description
----------------------------|---------------------------------------------------
  0x00000000                  invalid/reserved
  0x00000001                  string
  0x00000002                  array of string
  0x00000003                  encoded string
  0x00000004                  array of encoded string
  0x00000005                  single
  0x00000006                  array of single
  0x00000007                 *unknown (expecting double)
  0x00000008                 *unknown (expecting array of double)
  0x00000009                  vec3s
  0x0000000A                  array of vec3s
  0x0000000B - 0x00000010     unknown
  0x00000011                  vec3i
  0x00000012                  array of vec3i
  0x00000013 - 0x00000016     unknown
  0x00000017                  vec4s
  0x00000018                  array of vec4s
  0x00000019                  vec7s(1), vec8s(2)
  0x0000001A                  array of vec7s(1), array of vec8s(2)
  0x0000001B - 0x00000024     unknown
  0x00000025                  int32
  0x00000026                  array of int32
  0x00000027                  uint32
  0x00000028                  array of uint32
  0x00000029                 *unknown (expecting int16)
  0x0000002A                 *unknown (expecting array of int16)
  0x0000002B                  uint16
  0x0000002C                  array of uint16
  0x0000002D - 0x00000030     unknown
  0x00000031                  int64
  0x00000032                 *unknown (probably array of int64)
  0x00000033                  uint64
  0x00000034                  array of uint64
  0x00000035                  bytebool
  0x00000036                  array of bytebool
  0x00000037                  ordinal string
  0x00000038                 *unknown (probably array of ordinal strings)
  0x00000039                  ID
  0x0000003A                  array of ID
  0x0000003B                  ID
  0x0000003C                  array of ID
  0x0000003D                  ID
  0x0000003E                 *unknown (probably array of ID)
  0x0000003F - 0xFFFFFFFF     unknown

As you can see, much of the numbers mark an unknown type. If you manage to
determine any type that is listed as unknown, please contact author of this
project (contacts are in readme).
Unknown types marked with * are experimentally implemented but inactive.


================================================================================
                     Description of individual known types
================================================================================

--------------------------------------------------------------------------------
String                                                                0x00000001
--------------------------------------------------------------------------------
An UTF8-encoded string. Char is 8bits wide. It is NOT null-terminated, length
is stored explicitly.
Stored as a following structure:

  begin
    UInt32  (4B)             - length of the string in chars
    Char[]  (variable size)  - array of chars, the string itself
  end


--------------------------------------------------------------------------------
Array of strings                                                      0x00000002
--------------------------------------------------------------------------------
Array of strings. For details about string type, refer to type 0x00000001.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    String[]  (variable size)  - array of strings
  end


--------------------------------------------------------------------------------
Encoded string                                                        0x00000003
--------------------------------------------------------------------------------
String identifier encoded into and stored as a 64bit number. Only lower 63 bits
of the number are used for the encoded string, bit 63 (highest bit) is used
internally by the game and should be ignored in decoding.
The identifier can contain only numbers, small letters and an underscore.
Maximum length of the identifier is 12 characters (see further for explanation).

The encoding is done following way:

  - the encoded result is set to zero
  - the string is traversed from the last character to the first (backwards)
    - a character gets an index value in range <1,37> (an index in CharTable)
    - the current result is multiplied by 38
    - value of the characted index is added to the result
    - traversing continues to the next character

In simple pseudocode, it would look:

  Result = 0;
  For each character in indetifier do
    begin
      CharIndex = Index of current character in CharTable;
      Result = (Result * 38) + CharIndex;
    end

CharTable is defined as following array (length is 37, first item is indexed 1,
last is 37):

  0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,_

Given the mentioned procedure, length of the identifier is limited to 12,
because it is the largest integer power of 38 smaller than maximum value a 64bit
number can hold.


--------------------------------------------------------------------------------
Array of encoded strings                                              0x00000004
--------------------------------------------------------------------------------
Array of encoded strings - unsigned 64bit numbers. For details about encoded
string type, refer to type 0x00000003.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    UInt64[]  (variable size)  - array of encoded strings
  end


--------------------------------------------------------------------------------
Single                                                                0x00000005
--------------------------------------------------------------------------------
Single-precision (32bits/4bytes wide) floating point number (IEEE 754).


--------------------------------------------------------------------------------
Array of single                                                       0x00000006
--------------------------------------------------------------------------------
An array of single-precision floating point numbers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    Single[]  (variable size)  - array of single-precisiotn fp numbers
  end


--------------------------------------------------------------------------------
Vec3s                                                                 0x00000009
--------------------------------------------------------------------------------
Vector of three single-precision floating point numbers.
Stored as a following structure:

  begin
    Single  (4B)  - first component of the vector (usually X)
    Single  (4B)  - second component of the vector (Y)
    Single  (4B)  - third component of the vector (Z)
  end


--------------------------------------------------------------------------------
Array of Vec3s                                                        0x0000000A
--------------------------------------------------------------------------------
An array of 3-dimensional vectors of single-precision floating point numbers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    Vec3s[]   (variable size)  - array of 3s vectors
  end


--------------------------------------------------------------------------------
Vec3i                                                                 0x00000011
--------------------------------------------------------------------------------
Vector of three 32bit (4bytes) wide signed integers.
Stored as a following structure:

  begin
    Int32 (4B)  - first component of the vector (usually X)
    Int32 (4B)  - second component of the vector (Y)
    Int32 (4B)  - third component of the vector (Z)
  end


--------------------------------------------------------------------------------
Array of vec3i                                                        0x00000012
--------------------------------------------------------------------------------
Array of vectors, where each vector contains three 32bit signed integers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    Vec3i[]   (variable size)  - array of vectors
  end


--------------------------------------------------------------------------------
Vec4s                                                                 0x00000017
--------------------------------------------------------------------------------
Vector of four single-precision floating point numbers.
Stored as a following structure:

  begin
    Single  (4B)  - first component of the vector (usually X)
    Single  (4B)  - second component of the vector (Y)
    Single  (4B)  - third component of the vector (Z)
    Single  (4B)  - fourth component of the vector (W)
  end


--------------------------------------------------------------------------------
array of Vec4s                                                        0x00000018
--------------------------------------------------------------------------------
An array of 4-dimensional vectors of single-precision floating point numbers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    Vec4s[]   (variable size)  - array of vectors
  end


--------------------------------------------------------------------------------
Vec7s(1), Vec8s(2)                                                    0x00000019
--------------------------------------------------------------------------------
This type differs in format version 1 and 2.

Format version 1 (Vec7s)
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Vector of seven single-precision floating point numbers.
Stored as a following structure:

  begin
    Single  (4B)  - first component of the vector
    Single  (4B)  - second component of the vector
    Single  (4B)  - third component of the vector
    Single  (4B)  - fourth component of the vector
    Single  (4B)  - fifth component of the vector
    Single  (4B)  - sixth component of the vector
    Single  (4B)  - seventh component of the vector
  end


Format version 2 (Vec8s)
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Vector of eight single-precision floating point numbers.
The first and third components are stored biased, that is, shifted by some
value. Each of the two components may have a different bias value. These values
are stored in the fourth component (here marked as hidden, because it never
appears in textual SII files). How to get bias values from this component is
described further down.
Stored as a following structure:

  begin
    Single  (4B)  - first component of the vector
    Single  (4B)  - second component of the vector
    Single  (4B)  - third component of the vector
    Single  (4B)  - fourth, hidden component (bias)
    Single  (4B)  - fifth component of the vector
    Single  (4B)  - sixth component of the vector
    Single  (4B)  - seventh component of the vector
    Single  (4B)  - eighth component of the vector
  end

To get the bias values, do following:

    - get truncated value (its integer part, without any rounding) of the
      fourth component as an 32bit integer
    - for first component...
      - take lowest 12bits of the integer and subtract 2048
      - shift resulting value left by 9 bits
      - add resulting integer value to the first component
    - for third component...
      - take bits 12 to 23, shift them right (logical shift) by 12 bits and
        subtract 2048
      - shift resulting value left by 9 bits
      - add resulting integer value to the third component

WARNING - it is not known whether second component is biased too, but in all
          examined data, it never was.


--------------------------------------------------------------------------------
Array of Vec7s(1), array of Vec8s(2)                                  0x0000001A
--------------------------------------------------------------------------------
This type differs in format version 1 and 2.
Array of vectors, where each vector contains seven (format version 1) or
eight (format version 2) single-precision floating point numbers. For details
about the vec7s and/or vec8s, refer to documentation of type 0x00000019.
Stored as a following structure in format version 1:

  begin
    UInt32    (4B)             - length of the array
    Vec7s[]   (variable size)  - array of vectors
  end

...or, for format version 2:

  begin
    UInt32    (4B)             - length of the array
    Vec8s[]   (variable size)  - array of vectors
  end


--------------------------------------------------------------------------------
Int32                                                                 0x00000025
--------------------------------------------------------------------------------
32 bits (4 bytes) wide signed 2-complement integer.


--------------------------------------------------------------------------------
Array of int32                                                        0x00000026
--------------------------------------------------------------------------------
An array of 32bit signed integers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    Int32[]   (variable size)  - array of 32bit signed integers
  end


--------------------------------------------------------------------------------
UInt32                                                                0x00000027
--------------------------------------------------------------------------------
32 bits (4 bytes) wide unsigned integer.


--------------------------------------------------------------------------------
Array of uint32                                                       0x00000028
--------------------------------------------------------------------------------
An array of 32bit unsigned integers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    UInt32[]  (variable size)  - array of 32bit unsigned integers
  end


--------------------------------------------------------------------------------
UInt16                                                                0x0000002B
--------------------------------------------------------------------------------
16 bits (2 bytes) wide unsigned integer.


--------------------------------------------------------------------------------
Array of uint16                                                       0x0000002C
--------------------------------------------------------------------------------
An array of 16bit unsigned integers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    UInt16[]  (variable size)  - array of 16bit unsigned integers
  end


--------------------------------------------------------------------------------
Int64                                                                 0x00000031
--------------------------------------------------------------------------------
64 bits (8 bytes) wide signed integer.


--------------------------------------------------------------------------------
UInt64                                                                0x00000033
--------------------------------------------------------------------------------
64 bits (8 bytes) wide unsigned integer.


--------------------------------------------------------------------------------
Array of uint64                                                       0x00000034
--------------------------------------------------------------------------------
An array of 64bit unsigned integers.
Stored as a following structure:

  begin
    UInt32    (4B)             - length of the array
    UInt64[]  (variable size)  - array of 64bit unsigned integers
  end


--------------------------------------------------------------------------------
ByteBool                                                              0x00000035
--------------------------------------------------------------------------------
8 bits (1 byte) wide boolean value. Value of zero indicates false, any other
(non-zero) value indicates true.


--------------------------------------------------------------------------------
Array of bytebool                                                     0x00000036
--------------------------------------------------------------------------------
An array of 8bit boolean values.
Stored as a following structure:

  begin
    UInt32      (4B)             - length of the array
    ByteBool[]  (variable size)  - array of 8bit booleans
  end


--------------------------------------------------------------------------------
Ordinal string                                                        0x00000037
--------------------------------------------------------------------------------
In data block stored as one 32bit unsigned integer, but value actually denotes a
string stored in appropriate structure block for the actual field.

Value type data structure (stored in structure block):

  begin
    UInt32  (4B)            - length of the following array
    array of...
    begin
      UInt32  (4B)            - ordinal value
      String  (variable size) - string corresponding to the ordinal value
    end
  end


--------------------------------------------------------------------------------
ID (a complex value)                          0x00000039, 0x0000003B, 0x0000003D
--------------------------------------------------------------------------------
ID is a complex structure whose definitive behavior is not known at this moment.
Also, there is no known difference between the three known types (0x39,0x3B,
0x3D), but it is possible there is some.
ID starts with an 8bit value that denotes its length (number of parts), followed
by an array of 64bit numbers (individual parts). So, the general structure is as
follows:

  begin
    UInt8     (1B)              - length of the ID (the following array)
    UInt64[]  (variable size)   - array of ID parts
  end

Length can be anything from zero up to 254. 255 (0xFF) is reserved for
"nameless" ID (see further).
If the length is between 1 and 254, then each individual part contains one
encoded string (see type 0x00000003). In textual SII, these parts are usually
separated by a dot and identifies an in-game data asset (companies, cities,
vehicles, ...).
If the length is 255 (0xFF), then the ID contains exactly one part, where this
part is NOT an encoded string, it is instead taken as-is (an ordinary 64bit
number). It is suspected that this number might have been a valid memory address
during saving, but in a file it has no inherent meaning. This ID is in textual
SII files shown as text "_nameless" followed by a specific hexadecimal
representation of the number.


--------------------------------------------------------------------------------
Array of ID                                               0x0000003A, 0x0000003C
--------------------------------------------------------------------------------
An array of ID structures. For details about the ID structure, refer to type
0x00000039.
Stored as a following structure:

  begin
    UInt32  (4B)             - length of the array
    ID[]    (variable size)  - array of ID structures
  end